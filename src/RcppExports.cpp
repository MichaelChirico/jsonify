// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_pretty_json
Rcpp::StringVector rcpp_pretty_json(const char* json);
RcppExport SEXP _jsonify_rcpp_pretty_json(SEXP jsonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type json(jsonSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pretty_json(json));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_minify_json
Rcpp::StringVector rcpp_minify_json(const char* json);
RcppExport SEXP _jsonify_rcpp_minify_json(SEXP jsonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type json(jsonSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_minify_json(json));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pretty_print
void rcpp_pretty_print(const char* json);
RcppExport SEXP _jsonify_rcpp_pretty_print(SEXP jsonSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type json(jsonSEXP);
    rcpp_pretty_print(json);
    return R_NilValue;
END_RCPP
}
// rcpp_numeric_to_json
Rcpp::StringVector rcpp_numeric_to_json(Rcpp::NumericVector nv, bool unbox, int digits);
RcppExport SEXP _jsonify_rcpp_numeric_to_json(SEXP nvSEXP, SEXP unboxSEXP, SEXP digitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nv(nvSEXP);
    Rcpp::traits::input_parameter< bool >::type unbox(unboxSEXP);
    Rcpp::traits::input_parameter< int >::type digits(digitsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_numeric_to_json(nv, unbox, digits));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_character_to_json
Rcpp::StringVector rcpp_character_to_json(Rcpp::StringVector sv, bool unbox);
RcppExport SEXP _jsonify_rcpp_character_to_json(SEXP svSEXP, SEXP unboxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type sv(svSEXP);
    Rcpp::traits::input_parameter< bool >::type unbox(unboxSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_character_to_json(sv, unbox));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_list_to_json
Rcpp::StringVector rcpp_list_to_json(SEXP lst, bool unbox, int digits);
RcppExport SEXP _jsonify_rcpp_list_to_json(SEXP lstSEXP, SEXP unboxSEXP, SEXP digitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lst(lstSEXP);
    Rcpp::traits::input_parameter< bool >::type unbox(unboxSEXP);
    Rcpp::traits::input_parameter< int >::type digits(digitsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_list_to_json(lst, unbox, digits));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_validate_json
Rcpp::LogicalVector rcpp_validate_json(Rcpp::StringVector json);
RcppExport SEXP _jsonify_rcpp_validate_json(SEXP jsonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type json(jsonSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_validate_json(json));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_jsonify_rcpp_pretty_json", (DL_FUNC) &_jsonify_rcpp_pretty_json, 1},
    {"_jsonify_rcpp_minify_json", (DL_FUNC) &_jsonify_rcpp_minify_json, 1},
    {"_jsonify_rcpp_pretty_print", (DL_FUNC) &_jsonify_rcpp_pretty_print, 1},
    {"_jsonify_rcpp_numeric_to_json", (DL_FUNC) &_jsonify_rcpp_numeric_to_json, 3},
    {"_jsonify_rcpp_character_to_json", (DL_FUNC) &_jsonify_rcpp_character_to_json, 2},
    {"_jsonify_rcpp_list_to_json", (DL_FUNC) &_jsonify_rcpp_list_to_json, 3},
    {"_jsonify_rcpp_validate_json", (DL_FUNC) &_jsonify_rcpp_validate_json, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_jsonify(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
